---
import "@/styles/global.css";
import LanguagePicker from "./LanguagePicker.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import type { UIDictionaryKeys } from "@/i18n/ui";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface NavItem {
  label: UIDictionaryKeys;
  href: string;
}

const navItems: NavItem[] = [
  { label: "nav_home", href: "#home" },
  { label: "nav_about", href: "#about" },
  { label: "nav_projects", href: "#projects" },
  { label: "nav_techs", href: "#technologies" },
  { label: "nav_gallery", href: "#gallery" },
];
---

<div class="flex justify-center w-full">
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%] md:w-auto"
  >
    <div class="container mx-auto flex justify-center items-center p-3">
      <button id="burger" class="md:hidden text-white" aria-label="Open menu">
        &#9776;
      </button>

      <ul
        id="nav-list"
        class="hidden md:flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6 absolute bottom-full left-0 md:static bg-[var(--background)] md:bg-transparent px-4 md:px-0 py-4 md:py-0"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none bg-[var(--background)] md:bg-transparent px-4 md:px-0 py-4 md:py-0">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
              >
                <span>{t(item.label)}</span>
              </a>
            </li>
          ))
        }
        <li
          class="flex-1 md:flex-none bg-[var(--background)] md:bg-transparent px-4 md:px-0 py-4 md:py-0"
        >
          <LanguagePicker client:visible />
        </li>
      </ul>
    </div>
  </nav>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const nav = document.getElementById("main-nav") as HTMLElement | null;
      const navList = document.getElementById("nav-list") as HTMLElement | null;
      const burger = document.getElementById("burger") as HTMLElement | null;
      const navLinks = document.querySelectorAll("nav a[href^='#']");
      const sections = document.querySelectorAll("section[id]");
      let rafId: number | null = null;
      let mainObserver: IntersectionObserver;
      let lastKnownWidth = window.innerWidth;

      if (nav) {
        nav.addEventListener("click", () => {
          if (window.innerWidth < 768) {
            navList?.classList.toggle("hidden");
          }
        });
      }

      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener("click", function (e: Event) {
          e.preventDefault();
          const target = e.currentTarget as HTMLAnchorElement | null;
          if (!target) return;
          const targetId = target.getAttribute("href")?.substring(1) || "";
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: "smooth" });
          }
          if (window.innerWidth < 768 && navList) {
            navList.classList.add("hidden");
          }
        });
      });

      const initializeObserver = () => {
        if (mainObserver) {
          mainObserver.disconnect();
        }

        const isMobile = window.innerWidth < 768;
        const observerOptions: IntersectionObserverInit = {
          rootMargin: isMobile ? "-20% 0px -60% 0px" : "-40% 0px -40% 0px",
          threshold: isMobile ? 0.05 : 0.1,
        };

        const observerCallback: IntersectionObserverCallback = (entries) => {
          const activeEntry = entries
            .filter((entry: IntersectionObserverEntry) => entry.isIntersecting)
            .sort((a, b) => b.intersectionRatio - a.intersectionRatio)[0];

          if (activeEntry) {
            navLinks.forEach((link) => {
              link.classList.remove(
                "active",
                "text-[#FF6900]",
                "font-semibold"
              );
              link.classList.add("text-[var(--white-icon)]");
            });
            const id = activeEntry.target.getAttribute("id");
            const activeLink = document.querySelector(`nav a[href="#${id}"]`);
            if (activeLink) {
              activeLink.classList.add(
                "active",
                "text-[#FF6900]",
                "font-semibold"
              );
              activeLink.classList.remove("text-[var(--white-icon)]");
            }
          }
        };

        mainObserver = new IntersectionObserver(
          observerCallback,
          observerOptions
        );
        sections.forEach((section) => {
          mainObserver.observe(section);
        });
      };

      initializeObserver();

      window.addEventListener("resize", () => {
        if (lastKnownWidth !== window.innerWidth) {
          lastKnownWidth = window.innerWidth;
          initializeObserver();
        }
      });

      const maxScroll = 1000;
      let minWidth = 528;

      function updateNavWidth(): void {
        if (!nav || !navList) return;
        const contentWidth = navList.scrollWidth + 48;
        minWidth = contentWidth;
        const maxWidth = window.innerWidth * 0.8;

        if (window.scrollY > 0) {
          nav.classList.add("scrolling");
          const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
          const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);
          const currentWidth = Math.max(
            minWidth + (maxWidth - minWidth) * (1 - easeProgress),
            minWidth
          );
          if (window.innerWidth >= 768) {
            nav.style.setProperty("width", `${currentWidth}px`);
          }
        } else {
          nav.classList.remove("scrolling");
          nav.style.setProperty("width", "80%");
        }
        rafId = null;
      }

      window.addEventListener("scroll", () => {
        if (rafId === null) {
          rafId = requestAnimationFrame(updateNavWidth);
        }
      });

      if (navList) {
        minWidth = navList.scrollWidth + 48;
      }
    });
  </script>
</div>
