---
import { LANGUAGES } from "@/i18n/ui";
import { getLangFromUrl } from "@/i18n/utils";
const current = getLangFromUrl(Astro.url);
---

<div
  data-lang-picker
  class="relative group flex justify-center md:inline-flex md:justify-start"
>
  <button
    type="button"
    data-lang-btn
    class="flex flex-row items-center gap-1 text-[var(--white-icon)]
           transition-colors text-xs md:text-base hover:text-[#FF6900] focus:outline-none"
    aria-haspopup="true"
    aria-expanded="false"
  >
    <span class="leading-none">üåê</span>
    <span class="leading-none">{LANGUAGES[current]}</span>
  </button>

  <span
    class="hidden md:block absolute left-0 right-0 top-full h-4 z-40 pointer-events-auto"
  ></span>

  <ul
    data-lang-menu
    class="absolute bottom-[calc(100%+0.5rem)] md:top-[calc(100%+0.5rem)] left-1/2 -translate-x-1/2
          md:bottom-auto md:w-40 w-44 bg-[var(--background)] border border-white/10 rounded-lg shadow-lg
          opacity-0 translate-y-1 md:translate-y-1 pointer-events-none
          md:group-hover:opacity-100 md:group-hover:translate-y-0 md:group-hover:pointer-events-auto
          transition-all duration-150 ease-in-out z-50"
    role="menu"
  >
    {
      Object.entries(LANGUAGES).map(([lang, label]) => (
        <li role="none">
          <a
            role="menuitem"
            href={`/${lang}`}
            class="block px-4 py-2 text-sm text-[var(--white-icon)] hover:bg-white/10 hover:text-[#FF6900] rounded-md text-center"
          >
            {label}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const isMobile = () => window.innerWidth < 768;

    document.querySelectorAll("[data-lang-picker]").forEach((root) => {
      const btn = root.querySelector("[data-lang-btn]");
      const menu = root.querySelector("[data-lang-menu]");

      // guard: asegurar que sean HTMLElements
      if (!(btn instanceof HTMLElement) || !(menu instanceof HTMLElement))
        return;

      const openMenu = () => {
        menu.classList.add(
          "opacity-100",
          "translate-y-0",
          "pointer-events-auto"
        );
        menu.classList.remove(
          "opacity-0",
          "translate-y-1",
          "pointer-events-none"
        );
        btn.setAttribute("aria-expanded", "true");
      };

      const closeMenu = () => {
        menu.classList.remove(
          "opacity-100",
          "translate-y-0",
          "pointer-events-auto"
        );
        menu.classList.add("opacity-0", "translate-y-1", "pointer-events-none");
        btn.setAttribute("aria-expanded", "false");
      };

      const handleResize = () => {
        closeMenu();
      };
      handleResize();
      window.addEventListener("resize", handleResize);

      btn.addEventListener("click", (e) => {
        if (!isMobile()) return;
        e.stopPropagation();
        const isOpen = menu.classList.contains("opacity-100");
        isOpen ? closeMenu() : openMenu();
      });

      document.addEventListener("click", (e) => {
        if (!isMobile()) return;

        const t = e.target;
        if (!(t instanceof Node)) return;
        if (!root.contains(t)) closeMenu();
      });
    });
  });
</script>
